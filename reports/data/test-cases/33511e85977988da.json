{"uid":"33511e85977988da","name":"test_info","fullName":"tests.api.test_Mall#test_info","historyId":"1e17a5b187ad13f3b12841074df6fc33","time":{"start":1701063402647,"stop":1701063402648,"duration":1},"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL '': No scheme supplied. Perhaps you meant https://?","statusTrace":"def test_info():\n        url = \"\"\n        token = \"\"\n        headers = {'Authorization': 'JWT' + token}\n    \n        request = Request()\n>       r = request.get(url,headers=headers)\n\ntests\\api\\test_Mall.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\RequestsUtil.py:64: in get\n    return  self.requests_api(url, method=\"get\", **kwargs)\nutils\\RequestsUtil.py:46: in requests_api\n    r = requests.get(url,data=data,json=json,headers=headers,cookies=cookies)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py:575: in request\n    prep = self.prepare_request(req)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py:486: in prepare_request\n    p.prepare(\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [GET]>, url = '', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant https://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL '': No scheme supplied. Perhaps you meant https://?\n\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:439: MissingSchema","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL '': No scheme supplied. Perhaps you meant https://?","statusTrace":"def test_info():\n        url = \"\"\n        token = \"\"\n        headers = {'Authorization': 'JWT' + token}\n    \n        request = Request()\n>       r = request.get(url,headers=headers)\n\ntests\\api\\test_Mall.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\RequestsUtil.py:64: in get\n    return  self.requests_api(url, method=\"get\", **kwargs)\nutils\\RequestsUtil.py:46: in requests_api\n    r = requests.get(url,data=data,json=json,headers=headers,cookies=cookies)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py:575: in request\n    prep = self.prepare_request(req)\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py:486: in prepare_request\n    p.prepare(\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [GET]>, url = '', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant https://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL '': No scheme supplied. Perhaps you meant https://?\n\nC:\\Users\\17935\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:439: MissingSchema","steps":[],"attachments":[{"uid":"3fa73e3178833040","name":"log","source":"3fa73e3178833040.txt","type":"text/plain","size":52},{"uid":"47c8d448846f337d","name":"stderr","source":"47c8d448846f337d.txt","type":"text/plain","size":96}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_Mall"},{"name":"host","value":"须宇杰的电脑"},{"name":"thread","value":"2032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_Mall"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"33511e85977988da.json","parameterValues":[]}